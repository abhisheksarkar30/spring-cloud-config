services:
  config-server:
    build: config-server
    env_file:
      - .env
    command: ["--spring.rabbitmq.username=${RABBITMQ_USER}", "--spring.rabbitmq.password=${RABBITMQ_PASSWORD}"]
    depends_on:
      rabbit-mq:
        condition: service_healthy
        restart: true
    healthcheck:
      test: [ "CMD-SHELL", "netstat -nl | grep 8888"]
      interval: 15s
      timeout: 5s
      retries: 3
#    deploy:
#      mode: replicated
#      replicas: 2

  config-client:
    build: limits-service
    env_file:
      - .env
    environment:
      - spring.rabbitmq.username=${RABBITMQ_USER}
      - spring.rabbitmq.password=${RABBITMQ_PASSWORD}
    depends_on:
      config-server:
        condition: service_healthy
        restart: true
      rabbit-mq:
        condition: service_healthy
        restart: true
    ports:
      - "8080:8080"

#  config-client2:
#    build: limits-service
#    env_file:
#      - .env
#    environment:
#      - spring.rabbitmq.username=${RABBITMQ_USER}
#      - spring.rabbitmq.password=${RABBITMQ_PASSWORD}
#    depends_on:
#      config-server:
#        condition: service_healthy
#        restart: true
#      rabbit-mq:
#        condition: service_healthy
#        restart: true
#    ports:
#      - "8081:8080"

  rabbit-mq:
    image: bitnami/rabbitmq
    env_file:
      - .env
    entrypoint: sh -c "
      nohup /opt/bitnami/scripts/rabbitmq/entrypoint.sh /opt/bitnami/scripts/rabbitmq/run.sh 
      & echo 'Waiting to create user...' 
      && until sleep 25s && rabbitmqctl list_users | grep ${RABBITMQ_USER} || rabbitmqctl add_user ${RABBITMQ_USER} ${RABBITMQ_PASSWORD}; 
      do echo 'Try again'; 
      sleep 5; done 
      && rabbitmqctl set_user_tags ${RABBITMQ_USER} administrator 
      && rabbitmqctl set_permissions -p / ${RABBITMQ_USER} '.*' '.*' '.*'
      && trap 'rabbitmqctl stop' TERM
      && wait $(pgrep -f rabbitmq-server)"
    # docker lifecycle depends on PID #1 which includes the primary process rabbitmq executed as nohup
    # thus, if we don't wait for the specific rabbitmq server PID to exit, the container will shutdown
    # even if the mq server is not stopped, there by killing the process entirely.

    # This was a special case though, in other cases like config-server/client above, the long-running
    # server process being the primary one and active on foreground, won't let the container die.
    ports:
      - "15672:15672"
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmqctl list_permissions | grep ${RABBITMQ_USER}"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s